
    <!-- Content Header (Page header) -->
    <section class="content-header">
      <h1>
        Port Discovery
        <small>subnet scan</small>
      </h1>
      <ol class="breadcrumb">
        <li><a href="#"><i class="fa fa-dashboard"></i> Home</a></li>
        <li><a href="#">Network</a></li>
        <li class="active">Port Discovery</li>
      </ol>
    </section>

    <!-- Main content -->
    <section class="content">
      <div class="row">
      <div class="col-xs-6">

      <!-- general form elements -->
                        <div class="box box-primary">
                          <div class="box-header with-border">
                            <h3 class="box-title">Port Scan
                            <small> - All Discovered Devices</small>
                            </h3>
                          </div>
                          <!-- /.box-header -->
                          <!-- form start -->
                          <form role="form">
                            <div class="box-body">
                              <div class="form-group">
                                <label for="deviceName">Start Port</label>
                                <input type="text" class="form-control" id="startPort" placeholder="Enter Start Port">
                              </div>
                              <div class="form-group">
                                   <label for="ipAddress">End Port</label>
                                   <input type="text" class="form-control" id="endPort" placeholder="Enter End Port">
                              </div>

                            </div>
                            <!-- /.box-body -->

                            <div class="box-footer">
                              <button type="submit" class="btn btn-primary">Submit</button>
                              <button type="submit" class="btn btn-primary">Default</button>
                            </div>
                          </form>
                        </div>
                        <!-- /.box -->



               </div>
        <div class="col-xs-6">

          <!-- /.box -->

          <div class="box">
            <div class="box-header">
              <h3 class="box-title">Port Details Table</h3>
              &nbsp;
              <button type="button" id="filterButton" class="btn btn-sm btn-primary">Discovery</button>
            </div>

            <!-- /.box-header -->
            <div class="box-body">
              <table id="example1" class="table table-bordered table-striped">
                <thead>

                <tr>

                   <th class="id">Device Name</th>
                   <th class="deviceID">Device Name</th>
                   <th class="portDetails">Port Details</th>
                   <th class="dateScanned">Port Status</th>

                </tr>
                </thead>


                <tfoot>
                <tr>
                  <th>Identifier</th>
                  <th>Device Name</th>
                  <th>Port Details</th>
                  <th>Date Scanned</th>
                </tr>
                </tfoot>
              </table>
            </div>
            <!-- /.box-body -->
          </div>
          <!-- /.box -->
        </div>
        <!-- /.col -->
      </div>
      <!-- /.row -->
    </section>
    <!-- /.content -->

<!-- page script -->
<script src="../../bower_components/jquery/dist/jquery.min.js"></script>
<!-- Bootstrap 3.3.7 -->
<script src="../../bower_components/bootstrap/dist/js/bootstrap.min.js"></script>
<!-- DataTables -->
<script src="../../bower_components/datatables.net/js/jquery.dataTables.min.js"></script>
<script src="../../bower_components/datatables.net-bs/js/dataTables.bootstrap.min.js"></script>
<!-- SlimScroll -->
<script src="../../bower_components/jquery-slimscroll/jquery.slimscroll.min.js"></script>
<script th:inline="javascript">
    //<![CDATA[
    (function ($) {

        var table;

        var filterButton = $('#filterButton');
        var resetButton = $('#resetButton');
        var waitSpinner = $('#waitSpinner');

        var textlogTable = $('#textlogTable');
        var statusInclude = $('#statusInclude');
        var statusExclude = $('#statusExclude');
        var subs = $('#subs');
        var devices = $('#devices');
        var categories = $('#categories');
        var categoryLabels = categories.find('> label');

        var added = $('#added');
        var removed = $('#removed');
        var total = $('#total');

        var uf = $('#uf');
        var rt = $('#rt');
        var ufTime = $('#ufTime');
        var rtTime = $('#rtTime');

        /*[- use get(0) to get the actual DOM element, not the jQuery-wrapped one -]*/
        var jsUf = uf.get(0);
        var jsRt = rt.get(0);

        $.ajax({
            url:'http://127.0.0.1:8080/ClearStream/',
            datasrc: 'content',
            dataType: 'text',
            success: function(data) {//var data2 = JSON.parse(data);
                //window.alert('Here');



            },

        });


        filterButton.on('click', function() { discoveryForm(); })

        function discoveryForm(){

            waitSpinner.fadeIn("slow");

            $.ajax({
                url:'http://127.0.0.1:8080/PortDiscovery/',
                datasrc: 'content',
                dataType: 'text',
                beforeSend: function (jqXHR, settings) {

                },
                success: function(data) {//var data2 = JSON.parse(data);
                    //window.alert('Here');

                    waitSpinner.fadeOut("slow");

                },

            });
        }





        function seconds(v) {
            return Number(v) * 1000;
        }

        function minutes(v) {
            return seconds(v) * 60;
        }

        var updateFrequency = seconds(1);
        var retentionTime = minutes(200000);

        /*[- the current value in the database at time of rendering; ajax requests will be based off this value -]*/
        var maxSerial = /*[[${maxSerial}]]*/ 0;

        var extantAjaxTimeout;
        extantAjaxTimeout = setTimeout(process, updateFrequency);
        function process() {

            var nowTime = new Date().getTime();

            function rmOldRows() {
                var cleanupTime = new Date(nowTime - retentionTime).getTime();

                var rmCount = 0;
                table.rows().every(function (rowIdx, tableLoop, rowLoop) {
                    var data = this.data();

                    if (data) {
                        var rm = data.time_added <= cleanupTime;
                        if (rm) {
                            this.remove();
                            rmCount++;
                        }
                    }
                });
                return rmCount;
            }

            /*[- http://stackoverflow.com/a/39703376 -]*/
            function maxSerials(json) {
                var serials = json.map(function (o) {
                    return o.id;
                });
                return Math.max.apply(null, serials);
            }

            /*[- process each row separately so that can add a time_added attribute to each; used when cleaning up expired rows -]*/
            function addNewrows(json) {
                $.each(json, function (i, row) {
                    row.time_added = nowTime;
                    table.row.add(row);
                });
                return json.length;
            }

            var totalRemoved = rmOldRows();
            var rowsAdded = 0;

            //alert('Here');
            if (maxSerial == null){
                maxSerial = 0;
            }
            $.ajax({
                url: "http://127.0.0.1:8080/deviceStreamEntities/search/findByIdGreaterThan?id=" + maxSerial + "&size=1000",
                //dataSrc: '_embedded.ipaceDevicesEntities',
                //dataType: 'json',
                async: true,
                cache: false,
                timeout: updateFrequency * 2,
                dataFilter: function (data) {
                    var json = jQuery.parseJSON(data);
                    //window.alert(JSON.stringify(json.data[0].jobNumber));
                    return JSON.stringify(json);
                },
                //dataSrc: function (json) {
                //    alert(json.data);
                 //   return json.data; // you need to return data array here
               // },

                error: function(xhr, status, error) {
                    var err = eval("(" + xhr.responseText + ")");
                   // alert('here 4' + xhr.responseText);
                    var test = $.parseJSON(xhr.responseText);
                    //var test2 = $.parseJSON(test);
                   // alert("Test" + test);
                  //  alert(status);
                   // alert(error);
                },

                success: function (json, textStatus, jqXHR) {
                    json.hasOwnProperty('_embedded');
                   // alert('json oUT ' + json._embedded.ipaceDevicesEntities[0].id);
                    //alert('json devicename ' + json._embedded.ipaceDevicesEntities[0].deviceName);
                   // alert('here 3 ' + json);
                    //data = json._embedded.ipaceDevicesEntities;
                    if (json._embedded.deviceStreamEntities && (json._embedded.deviceStreamEntities.length > 0)) {

                        var lastMaxSerial = maxSerial;
                        var ms = maxSerials(json._embedded.deviceStreamEntities);
                     //   alert('json ' + json._embedded.deviceStreamEntities[0].deviceName);
                        /*[- seems like sometimes a duplicate query can be done; don't add duplicate data -]*/
                        if  (ms !== lastMaxSerial) {
                            rowsAdded = addNewrows(json._embedded.deviceStreamEntities);
                            maxSerial = ms;
                        }
                        else
                            rowsAdded = 0;
                    }
                },
                complete: function (jqXHR, textStatus) {
                    /*[- this section done regardless of success or not -]*/
                    added.text(rowsAdded);
                    removed.text(totalRemoved);
                    total.text(table.rows().data().length);

                    if ((rowsAdded > 0) || (totalRemoved > 0)){
                        //table.clear();
                        table.draw();

                    }




                    clearTimeout(extantAjaxTimeout);
                    extantAjaxTimeout = setTimeout(process, updateFrequency);
                }
            });
        } /*[- end process() -]*/

        /*[- allow the form to be submitted by pressing the return key iff form is valid -]*/
        $(subs).add(devices).add(statusInclude).add(statusExclude).on('keypress', function (event) {
            if (event.which == 13)
                filterButton.click();
        });

        $(subs).add(devices).add(statusInclude).add(statusExclude).popover({
            placement: "bottom",
            delay: {show: 1000, hide: 100},
            trigger: 'hover'
        });



        var selectedRow = null;

        table = $('#example1').DataTable({
            processing: false,
            serverSide: false,
            searching: false,
            orderFixed: [0, 'asc'],
            paging: false,
            scrollCollapse: false,
            lengthChange: false,
            info: false,
            scrollY: "60vh",
            deferLoading: 0,
            autoWidth: false,
            rowId: 'serial',

            columns: [
                {data: "id", className: "id"},
                {data: "deviceId", className: "deviceId"},
                {data: "portDetails", className: "portDetails"},
                {data: "dateScanned", className: "dateScanned"}
            ],
            drawCallback: function (settings) {
                if (selectedRow) {
                    selectedRow.get(0).scrollIntoView();
                }
            }
        });


        table.draw();
    })(jQuery);
    // ]]>
</script>

