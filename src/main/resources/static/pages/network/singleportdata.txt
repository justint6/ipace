
    <!-- Content Header (Page header) -->
    <section class="content-header">
      <h1>
        Devices
        <small>Device Details</small>
      </h1>
      <ol class="breadcrumb">
        <li><a href="#"><i class="fa fa-dashboard"></i> Home</a></li>
        <li><a href="#">Network Discovery Utilities</a></li>
        <li class="active">Device Port Scan</li>
      </ol>
    </section>

    <!-- Main content -->
    <section class="content">
      <div class="row">
        <div class="col-md-6">

          <!-- /.box -->

          <div class="box">
            <div class="box-header">
              <h3 class="box-title">Discovered Devices</h3>
            </div>
            <!-- /.box-header -->
            <div class="box-body">
              <table id="example1" class="table table-striped table-sm compact bg_white">
                <thead>

                <tr>

                  <th class="id">Identifier</th>
                  <th class="deviceName">Device Name</th>
                  <th class="online">Online</th>

                </tr>
                </thead>


                <tfoot>
                <tr>
                  <th>Identifier</th>
                  <th>Device Name</th>
                  <th>Online</th>
                </tr>
                </tfoot>
              </table>
            </div>
            <!-- /.box-body -->
          </div>
          <!-- /.box -->
        </div>
        <div class="col-md-6">





                      <div class="form-group">
                                                          <label for="deviceName">Scanned Count</label>
                                                          <input type="text" class="form-control" id="scannedCount" placeholder="0">

                                                          <label for="deviceName">IP Filter</label>
                                                          <input type="text" class="form-control" id="ipFilter" placeholder="0">
                        </div>

                        <a href="#myModal" role="button" class="btn btn-sm btn-primary" data-toggle="modal">Port Scan</a>

                  <div class="box">
                              <div class="box-header">
                                <h3 class="box-title">Individual Device - Port Details Scan</h3>
                                &nbsp;

                                <h3 id="ipDetails"></h3>
                              </div>

                              <!-- /.box-header -->
                              <div class="box-body">
                                <table id="example2" class="table table-striped table-sm compact bg_white">
                                  <thead>

                                  <tr>

                                     <th class="id">Device Name</th>
                                     <th class="deviceID">Device Name</th>
                                     <th class="portDetails">Port Details</th>
                                     <th class="dateScanned">Port Status</th>

                                  </tr>
                                  </thead>


                                  <tfoot>
                                  <tr>
                                    <th>Identifier</th>
                                    <th>Device Name</th>
                                    <th>Port Details</th>
                                    <th>Date Scanned</th>
                                  </tr>
                                  </tfoot>
                                </table>
                              </div>
                              <!-- /.box-body -->
                            </div>




        </div>
        <!-- /.col -->
      </div>
      <!-- /.row -->
    </section>






    <!-- Modal -->
        <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
          <div class="modal-dialog">
            <div class="modal-content">
              <div class="modal-header">
                <h4 class="modal-title" id="myModalLabel"><i class="fa fa-clock-o"></i> Please Wait</h4>
              </div>
              <div class="modal-body center-block">
                <div id="dialogText">About to scan the device for open ports. Do you want to continue?</div>
                <div class="progress">
                  <div class="progress-bar bar" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">

                  </div>
                </div>
                <button type="button" id="dialogButton" class="btn btn-sm btn-primary">Cancel</button>
              <button type="button" id="doScan" class="btn btn-sm btn-primary">Scan</button>
              </div>
            </div><!-- /.modal-content -->
          </div><!-- /.modal-dialog -->
        </div><!-- /.modal -->
        <!-- /.content -->




<!-- jQuery 3 -->
<script src="../../bower_components/jquery/dist/jquery.min.js"></script>
<!-- Bootstrap 3.3.7 -->
<script src="../../bower_components/bootstrap/dist/js/bootstrap.min.js"></script>
<!-- DataTables -->
<script src="../../bower_components/datatables.net/js/jquery.dataTables.min.js"></script>
<script src="../../bower_components/datatables.net-bs/js/dataTables.bootstrap.min.js"></script>
<!-- SlimScroll -->
<script src="../../bower_components/jquery-slimscroll/jquery.slimscroll.min.js"></script>
<!-- FastClick -->
<!-- page script -->
<script>
  $(function () {

      $.fn.DataTable.ext.pager.numbers_length = 10;

      /*[- https://datatables.net/manual/tech-notes/7 -]*/
      $.fn.dataTable.ext.errMode = 'throw';

      var table = $('#example1').DataTable({
          processing: false,
                                      serverSide: false,
                                      searching: false,
                                      orderFixed: [0, 'asc'],
                                      paging: false,
                                      scrollCollapse: false,
                                      lengthChange: false,
                                      info: false,
                                      scrollY: "60vh",
                                      deferLoading: 0,
                                      autoWidth: false,
                                      rowId: 'serial',
                                      scrollY: "600px",
                                        scroller: true,
          select: true,
          pageLength: 10,
          columnDefs: [
              {
                  targets: [ '_all' ], // if a number is specified here instead of all it will only apply to that column.
                  visible: true,
                  searchable: true
              }
          ],
          ajax: {
              /*[-
               don't use url key/value here: defer to the direct call to the onclick handler later
               (lets param handling be dealt with in a standardised way).
               -]*/
              url: "http://127.0.0.1:8080/ipaceDevicesEntities?size=20000",
              params: {
                  start: 0, //start at first record in db
                  limit: 100 //only return 100 results
              },
              dataSrc: '_embedded.ipaceDevicesEntities',

              cache: false,
              beforeSend: function (jqXHR, settings) {
                  //searchWaitSpinner.show();
              },

              error: function(jqXHR, textStatus) {
                  //searchWaitSpinner.hide();
              },



              complete: function(response, textStatus) {


              }

          },

          //field widths of the below are updated in the crewalloc.css file.
          columns: [
              {data: "id", className: "id"},
              {data: "deviceName", className: "deviceName"},
              {data: "online", className: "online"}
          ]
      });

        $('#example1 tbody').on('click', 'tr', function(){
            if ( $(this).hasClass('selected')) {
                $(this).removeClass('selected');
            } else {
                table.$('tr.selected').removeClass('selected');
                $(this).addClass('selected');
                $('#ipDetails').html(table.row('.selected').data().deviceName);
                var table2 = $('#example2').DataTable({
                          dom:  '<"toolbar"><"top"i><"test"p>rt<"bottom"><"clear">',
                          pageLength: 10,
                          columnDefs: [
                              {
                                  targets: [ '_all' ], // if a number is specified here instead of all it will only apply to that column.
                                  visible: true,
                                  searchable: true
                              }
                          ],
                          ajax: {
                              /*[-
                               don't use url key/value here: defer to the direct call to the onclick handler later
                               (lets param handling be dealt with in a standardised way).
                               -]*/
                              url: "http://127.0.0.1:8080/devicePortsEntities/search/findDistinctByDeviceId?deviceID=" + table.row('.selected').data().deviceName + "&size=10000",
                              params: {
                                  start: 0, //start at first record in db
                                  limit: 100 //only return 100 results
                              },
                              dataSrc: '_embedded.devicePortsEntities',

                              cache: false,
                              beforeSend: function (jqXHR, settings) {
                                  //searchWaitSpinner.show();
                              },

                              error: function(jqXHR, textStatus) {
                                  //searchWaitSpinner.hide();
                              },



                              complete: function(response, textStatus) {
                                    alert("In Here");

                              }

                          },

                          //field widths of the below are updated in the crewalloc.css file.
                          columns: [
                              {data: "deviceId", className: "deviceId"},
                              {data: "portDetails", className: "portDetails"},
                              {data: "dateScanned", className: "dateScanned"}
                          ]
                      });
                      table2.destroy();
                table2.draw();
            }
        });




    table.draw();


  })
</script>

<script th:inline="javascript">
    //<![CDATA[
    (function ($) {

        var table;

        var filterButton = $('#filterButton');
        var resetButton = $('#resetButton');
        var waitSpinner = $('#waitSpinner');

        var textlogTable = $('#textlogTable');
        var statusInclude = $('#statusInclude');
        var statusExclude = $('#statusExclude');
        var subs = $('#subs');
        var devices = $('#devices');
        var categories = $('#categories');
        var categoryLabels = categories.find('> label');

        var added = $('#added');
        var removed = $('#removed');
        var total = $('#total');

        var uf = $('#uf');
        var rt = $('#rt');
        var ufTime = $('#ufTime');
        var rtTime = $('#rtTime');

        /*[- use get(0) to get the actual DOM element, not the jQuery-wrapped one -]*/
        var jsUf = uf.get(0);
        var jsRt = rt.get(0);

        $('#scannedCount').val(0);

        $.ajax({
            url:'http://127.0.0.1:8080/ClearStream/',
            datasrc: 'content',
            dataType: 'text',
            success: function(data) {//var data2 = JSON.parse(data);
                             $('#myModal').on('shown.bs.modal', function () {
                                        //discoveryForm();
                                        var progress = setInterval(function() {
                                        var $bar = $('.bar');
                                        $('#dialogButton').on('click', function() {
                                                                     //alert($('#subnetDetails').val());
                                                                     $('#myModal').modal('hide');
                                                                      })
                                        if ($bar.width() == 600) {

                                            // complete

                                            clearInterval(progress);
                                            $('.progress').removeClass('active');
                                            $('#myModal').modal('hide');
                                            $bar.width(0);

                                        } else {

                                            // perform processing logic here
                                            $bar.width(Math.round(($('#scannedCount').val()) * 0.06));
                                            //$bar.width($bar.width()+50);
                                        }

                                        $bar.text(Math.round(($('#scannedCount').val()/10000) * 100)  + "%");
                                    	}, 1000);


                                    })
                                        $('#doScan').on('click', function() {
                                           // alert($('#subnetDetails').val());
                                           $('#dialogText').text("Scanning IP Address for Open Ports");
                                            discoveryForm();
                                         })



                filterButton.on('click', function() { discoveryForm(); })

                        function discoveryForm(){

                            waitSpinner.fadeIn("slow");

                            $.ajax({
                                url:'http://127.0.0.1:8080/DevicePortDiscovery?deviceId=' + $('#ipDetails').text(),
                                datasrc: 'content',
                                dataType: 'text',
                                beforeSend: function (jqXHR, settings) {

                                },
                                success: function(data) {//var data2 = JSON.parse(data);
                                    //window.alert(data);
                                    if (data == "Offline") {
                                        $('#dialogText').text("Unable to scan - device is offline");
                                    }
                                    waitSpinner.fadeOut("slow");

                                },

                            });
                        }





                        function seconds(v) {
                            return Number(v) * 1000;
                        }

                        function minutes(v) {
                            return seconds(v) * 60;
                        }

                        var updateFrequency = seconds(1);
                        var retentionTime = minutes(200000);

                        /*[- the current value in the database at time of rendering; ajax requests will be based off this value -]*/
                        var maxSerial = /*[[${maxSerial}]]*/ 0;

                        var extantAjaxTimeout;
                        extantAjaxTimeout = setTimeout(process, updateFrequency);
                        function process() {

                            var nowTime = new Date().getTime();

                            function rmOldRows() {
                                var cleanupTime = new Date(nowTime - retentionTime).getTime();

                                var rmCount = 0;
                                table.rows().every(function (rowIdx, tableLoop, rowLoop) {
                                    var data = this.data();

                                    if (data) {
                                        var rm = data.time_added <= cleanupTime;
                                        if (rm) {
                                            this.remove();
                                            rmCount++;
                                        }
                                    }
                                });
                                return rmCount;
                            }

                            /*[- http://stackoverflow.com/a/39703376 -]*/
                            function maxSerials(json) {
                                var serials = json.map(function (o) {
                                    return o.id;
                                });
                                return Math.max.apply(null, serials);
                            }

                            /*[- process each row separately so that can add a time_added attribute to each; used when cleaning up expired rows -]*/
                            function addNewrows(json) {
                                $.each(json, function (i, row) {
                                    row.time_added = nowTime;
                                    if (json[i].displayFlag > 0) {
                                        table.row.add(row);
                                     }
                                });
                                return json.length;
                            }

                            var totalRemoved = rmOldRows();
                            var rowsAdded = 0;

                            //alert('Here');
                            if (maxSerial == null){
                                maxSerial = 0;
                            }
                            $.ajax({
                                url: "http://127.0.0.1:8080/deviceStreamEntities/search/findByIdGreaterThan?id=" + maxSerial,
                                //dataSrc: '_embedded.ipaceDevicesEntities',
                                //dataType: 'json',
                                async: true,
                                cache: false,
                                timeout: updateFrequency * 2,
                                dataFilter: function (data) {
                                    var json = jQuery.parseJSON(data);
                                    //window.alert(JSON.stringify(json.data[0].jobNumber));
                                    return JSON.stringify(json);
                                },
                                //dataSrc: function (json) {
                                //    alert(json.data);
                                 //   return json.data; // you need to return data array here
                               // },

                                error: function(xhr, status, error) {
                                    var err = eval("(" + xhr.responseText + ")");
                                   // alert('here 4' + xhr.responseText);
                                    var test = $.parseJSON(xhr.responseText);
                                    //var test2 = $.parseJSON(test);
                                   // alert("Test" + test);
                                  //  alert(status);
                                   // alert(error);
                                },

                                success: function (json, textStatus, jqXHR) {
                                    json.hasOwnProperty('_embedded');
                                   // alert('json oUT ' + json._embedded.ipaceDevicesEntities[0].id);
                                    //alert('json devicename ' + json._embedded.ipaceDevicesEntities[0].deviceName);
                                   // alert('here 3 ' + json);
                                    //data = json._embedded.ipaceDevicesEntities;
                                    if (json._embedded.deviceStreamEntities && (json._embedded.deviceStreamEntities.length > 0)) {

                                        var lastMaxSerial = maxSerial;
                                        var ms = maxSerials(json._embedded.deviceStreamEntities);
                                     //   alert('json ' + json._embedded.deviceStreamEntities[0].deviceName);
                                        /*[- seems like sometimes a duplicate query can be done; don't add duplicate data -]*/
                                        if  (ms !== lastMaxSerial) {
                                            rowsAdded = addNewrows(json._embedded.deviceStreamEntities);
                                            maxSerial = ms;
                                            $('#scannedCount').val(maxSerial);
                                        }
                                        else
                                            rowsAdded = 0;
                                    }
                                },
                                complete: function (jqXHR, textStatus) {
                                    /*[- this section done regardless of success or not -]*/
                                    added.text(rowsAdded);
                                    removed.text(totalRemoved);
                                    total.text(table.rows().data().length);

                                    if ((rowsAdded > 0) || (totalRemoved > 0)){
                                        //table.clear();
                                        table.draw();

                                    }




                                    clearTimeout(extantAjaxTimeout);
                                    extantAjaxTimeout = setTimeout(process, updateFrequency);
                                }
                            });
                        } /*[- end process() -]*/

                        /*[- allow the form to be submitted by pressing the return key iff form is valid -]*/
                        $(subs).add(devices).add(statusInclude).add(statusExclude).on('keypress', function (event) {
                            if (event.which == 13)
                                filterButton.click();
                        });

                        $(subs).add(devices).add(statusInclude).add(statusExclude).popover({
                            placement: "bottom",
                            delay: {show: 1000, hide: 100},
                            trigger: 'hover'
                        });



                        var selectedRow = null;

                        table = $('#example2').DataTable({
                            processing: false,
                            serverSide: false,
                            searching: false,
                            orderFixed: [0, 'asc'],
                            paging: false,
                            scrollCollapse: false,
                            lengthChange: false,
                            info: false,
                            scrollY: "60vh",
                            deferLoading: 0,
                            autoWidth: false,
                            rowId: 'serial',

                            columns: [
                                {data: "id", className: "id"},
                                {data: "deviceId", className: "deviceId"},
                                {data: "portDetails", className: "portDetails"},
                                {data: "dateScanned", className: "dateScanned"}
                            ],
                            drawCallback: function (settings) {
                                if (selectedRow) {
                                    selectedRow.get(0).scrollIntoView();
                                }
                            }
                        });


                        table2.draw();



            },

        });



    })(jQuery);
    // ]]>
</script>
</body>
</html>

